import Head from 'next/head'
import styles from '../styles/Contact.module.scss'
import { Formik } from 'formik'
import * as Yup from "yup";
const schema = Yup.object().shape({
  name: Yup.string()
  .min(1, "Password must be greater than 1 character")
  .required("Required"),
  email: Yup.string().email("Invalid email address.").required("Required"),
  message: Yup.string().required("Required"),
});

export default function Contact() {
  return (
    <div>
      <Head>
        <title>Contact</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>   
      <main className={styles.main}>
        <section className={styles.titleContainer}>
          <h1 className={styles.title}>Want to say hi?{" "}
            <a
              href="https://www.linked.com/in/chasegarsee/"
              className=""
              target="_blank"
            >Shoot me a DM</a>, or send a piece of electronic mail. I would love to hear from you!</h1>  
        </section>  
        <section>
        <div className={styles.container}>
        <Formik
        enableReinitialize
        validateOnChange={false}
        validateOnBlur={false}
        validationSchema={schema}
        initialValues={{ name: "", email: "", message: '' }}
        onSubmit={async (values, { setSubmitting }) => {
          setSubmitting(true);
          try {
          await fetch('/api/contact', {
            method: 'POST',
            headers: {
              'Accept': 'application/json, text/plain, */*',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(values)
          })
          } catch(error) {
            console.log(error)
          } finally {
            setSubmitting(false)
          }
        }}
      >
        {({ 
          handleSubmit,
          handleChange,
          handleBlur,
          isSubmitting,
          values,
          errors,
          touched 
        }) => (
          <form onSubmit={handleSubmit} className={styles.main} >
            <formGroup className={styles.inputGroup}>
            <label htmlFor="name">{`Name ${touched.name && errors.name ? errors.name: ''}`}</label>
            <input
              id="name"
              name="name"
              type="text"
              onChange={handleChange}
              onBlur={handleBlur}
              value={values.name}
            />
            </formGroup>
            < formGroup className={styles.inputGroup} >
            <label htmlFor="email">{`Email ${touched.email && errors.email ? errors.email: ''}`}</label>
              <input
                id="email"
                name="email"
                type="text"
                onChange={handleChange}
                onBlur={handleBlur}
                value={values.email}
              />
            </formGroup>
            < formGroup className={styles.inputGroup} >
            <label htmlFor="message">{`Message ${touched.message && errors.message ? errors.message: ''}`}</label>
              <input
                id="message"
                name="message"
                type="text"
                onChange={handleChange}
                onBlur={handleBlur}
                value={values.message}
              />
            </formGroup>
            <button type='submit'>{isSubmitting ? 'Sending...' : "Send"}</button>
          </form >
        )}
        </Formik>
          </div>
        </section>
      </main>  
    </div>
  )
}
